#!/bin/bash

# Git Pre-Push Hook for Database Cleanup & ETL Pipeline
# This script runs automatically before every git push
# It ensures database is clean and optimized before deployment

set -e  # Exit on any error

echo "🚀 Git Pre-Push Hook: Database Cleanup & ETL Pipeline"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if database connection is available
check_database_connection() {
    print_status $BLUE "🔍 Checking database connection..."
    
    # Check if .env.local exists
    if [ ! -f ".env.local" ]; then
        print_status $YELLOW "⚠️  .env.local not found, skipping database operations"
        return 1
    fi
    
    # Check if database cleanup script exists
    if [ ! -f "scripts/database-cleanup-pipeline.js" ]; then
        print_status $YELLOW "⚠️  Database cleanup script not found, skipping database operations"
        return 1
    fi
    
    return 0
}

# Function to run database cleanup
run_database_cleanup() {
    print_status $BLUE "🧹 Running database cleanup pipeline..."
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        print_status $YELLOW "⚠️  Node.js not found, skipping database cleanup"
        return 0
    fi
    
    # Run the database cleanup pipeline
    if node scripts/database-cleanup-pipeline.js run; then
        print_status $GREEN "✅ Database cleanup completed successfully"
        return 0
    else
        print_status $RED "❌ Database cleanup failed"
        return 1
    fi
}

# Function to check for database-related changes
check_database_changes() {
    print_status $BLUE "🔍 Checking for database-related changes..."
    
    # Check if any database-related files were modified
    local db_files_changed=$(git diff --cached --name-only | grep -E "(database-schema\.sql|scripts/.*\.(js|sql)|src/lib/database\.ts)" || true)
    
    if [ -n "$db_files_changed" ]; then
        print_status $YELLOW "📊 Database-related files changed:"
        echo "$db_files_changed" | sed 's/^/  - /'
        return 0
    else
        print_status $BLUE "ℹ️  No database-related changes detected"
        return 1
    fi
}

# Function to run tests
run_tests() {
    print_status $BLUE "🧪 Running database tests..."
    
    # Check if npm is available
    if ! command -v npm &> /dev/null; then
        print_status $YELLOW "⚠️  npm not found, skipping tests"
        return 0
    fi
    
    # Run database-related tests
    if npm test -- --testPathPattern="(profile|todos).test.ts" --passWithNoTests; then
        print_status $GREEN "✅ Database tests passed"
        return 0
    else
        print_status $RED "❌ Database tests failed"
        return 1
    fi
}

# Function to create deployment backup
create_deployment_backup() {
    print_status $BLUE "💾 Creating deployment backup..."
    
    if check_database_connection; then
        if node scripts/database-cleanup-pipeline.js backup; then
            print_status $GREEN "✅ Deployment backup created"
            return 0
        else
            print_status $YELLOW "⚠️  Deployment backup failed, continuing..."
            return 0
        fi
    fi
    
    return 0
}

# Function to validate environment
validate_environment() {
    print_status $BLUE "🔍 Validating environment..."
    
    # Check required files
    local required_files=(
        "package.json"
        "database-schema.sql"
        "scripts/database-cleanup-pipeline.js"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            print_status $RED "❌ Required file missing: $file"
            return 1
        fi
    done
    
    print_status $GREEN "✅ Environment validation passed"
    return 0
}

# Function to generate deployment report
generate_deployment_report() {
    print_status $BLUE "📊 Generating deployment report..."
    
    local report_file="logs/deployment-report-$(date +%Y%m%d-%H%M%S).txt"
    mkdir -p logs
    
    {
        echo "Deployment Report - $(date)"
        echo "================================"
        echo ""
        echo "Git Information:"
        echo "  Branch: $(git branch --show-current)"
        echo "  Commit: $(git rev-parse HEAD)"
        echo "  Author: $(git log -1 --pretty=format:'%an <%ae>')"
        echo "  Message: $(git log -1 --pretty=format:'%s')"
        echo ""
        echo "Environment:"
        echo "  Node.js: $(node --version 2>/dev/null || echo 'Not available')"
        echo "  npm: $(npm --version 2>/dev/null || echo 'Not available')"
        echo "  Database: $(grep DB_HOST .env.local 2>/dev/null | cut -d'=' -f2 || echo 'Not configured')"
        echo ""
        echo "Files Changed:"
        git diff --cached --name-only | sed 's/^/  - /' || echo "  No staged changes"
        echo ""
        echo "Database Operations:"
        echo "  Backup: $([ -f "logs/backup-created" ] && echo "✅ Created" || echo "❌ Failed")"
        echo "  Cleanup: $([ -f "logs/cleanup-completed" ] && echo "✅ Completed" || echo "❌ Failed")"
        echo "  Tests: $([ -f "logs/tests-passed" ] && echo "✅ Passed" || echo "❌ Failed")"
    } > "$report_file"
    
    print_status $GREEN "✅ Deployment report generated: $report_file"
}

# Main execution
main() {
    local start_time=$(date +%s)
    local has_db_changes=false
    local cleanup_success=true
    
    # Step 1: Validate environment
    if ! validate_environment; then
        print_status $RED "❌ Environment validation failed"
        exit 1
    fi
    
    # Step 2: Check for database changes
    if check_database_changes; then
        has_db_changes=true
        print_status $YELLOW "📊 Database changes detected, running cleanup pipeline..."
        
        # Step 3: Create deployment backup
        create_deployment_backup
        
        # Step 4: Run database cleanup
        if ! run_database_cleanup; then
            cleanup_success=false
            print_status $RED "❌ Database cleanup failed"
        fi
        
        # Step 5: Run tests
        if ! run_tests; then
            cleanup_success=false
            print_status $RED "❌ Database tests failed"
        fi
    else
        print_status $BLUE "ℹ️  No database changes, skipping cleanup pipeline"
    fi
    
    # Step 6: Generate deployment report
    generate_deployment_report
    
    # Step 7: Final status
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo ""
    print_status $BLUE "📊 Pre-push hook summary:"
    echo "  Duration: ${duration}s"
    echo "  Database changes: $([ "$has_db_changes" = true ] && echo "Yes" || echo "No")"
    echo "  Cleanup success: $([ "$cleanup_success" = true ] && echo "Yes" || echo "No")"
    
    if [ "$has_db_changes" = true ] && [ "$cleanup_success" = false ]; then
        print_status $RED "❌ Pre-push hook failed due to database issues"
        print_status $YELLOW "💡 You can still push with: git push --no-verify"
        exit 1
    else
        print_status $GREEN "✅ Pre-push hook completed successfully"
        exit 0
    fi
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "Git Pre-Push Hook for Database Cleanup & ETL Pipeline"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo "  --skip-cleanup  Skip database cleanup (for emergency pushes)"
        echo ""
        echo "This hook runs automatically before git push and:"
        echo "  1. Validates environment"
        echo "  2. Checks for database-related changes"
        echo "  3. Creates deployment backup"
        echo "  4. Runs database cleanup pipeline"
        echo "  5. Runs database tests"
        echo "  6. Generates deployment report"
        echo ""
        echo "To bypass this hook: git push --no-verify"
        exit 0
        ;;
    --skip-cleanup)
        print_status $YELLOW "⚠️  Skipping database cleanup (--skip-cleanup flag)"
        print_status $GREEN "✅ Pre-push hook completed (cleanup skipped)"
        exit 0
        ;;
    *)
        main
        ;;
esac 