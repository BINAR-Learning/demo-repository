name: Deploy AML News Analyzer to Azure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: amlnewsregistry.azurecr.io
  CONTAINER_NAME: aml-news-analyzer
  RESOURCE_GROUP: rg-aml-news-analyzer
  CONTAINER_APP_NAME: ca-aml-news-analyzer

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run unit tests
      run: |
        python run_unit_tests.py
    
    - name: Run integration tests
      run: |
        python test_integration.py
    
    - name: Run code quality checks
      run: |
        pip install flake8 black
        black --check . || echo "Code formatting issues found"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Job 2: Build and Push Container
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Container
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to Azure Container Apps
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: Deploy to Azure
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        container-app-name: ${{ env.CONTAINER_APP_NAME }}
        container-image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
    
    - name: Get application URL
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        echo "Application deployed at: https://$APP_URL"

  # Job 4: Deploy to Staging
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Staging
      uses: azure/container-apps-deploy-action@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        container-app-name: ${{ env.CONTAINER_APP_NAME }}-staging
        container-image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
